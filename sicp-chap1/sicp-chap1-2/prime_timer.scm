(define (smallest-divisor n)
  (define (devides? a b) (= (remainder b a) 0))
  (define (next a) (if (= a 2) 3 (+ a 2)))
  (define (find-divisor n test)
	(cond ((> (* test test) n) n)
		  ((devides? test n) test)
		  (else (find-divisor n (next test)))))
  (find-divisor n 2)
)

(define (prime? n)
  (if (< n 2) #f
  (= (smallest-divisor n) n)))

(define (prime-timer n)
  (define (report-prime elapsed-time)
	(display " *** ")
	(display elapsed-time))
  (define (start-prime-test n start-time)
	(cond ((prime? n)
	  (report-prime (- (current-inexact-milliseconds) start-time)))))
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (search-primes n)
  (define (search-primes-count n count)
	(if (even? n)
	  (search-primes-count (+ n 1) count)
	  (cond ((> count 0) 
		(if (prime? n)
		  (begin
		    (prime-timer n)
		    (search-primes-count (+ n 2) (- count 1)))
		  (search-primes-count (+ n 2) count))))))
  (search-primes-count n 3)
  (newline)
)
