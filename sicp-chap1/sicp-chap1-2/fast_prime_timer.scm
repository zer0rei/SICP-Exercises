(define (expmod base expn m)
  (define (square a) (* a a))
  (cond ((< m 1) #f)
		((= expn 0) (remainder 1 m))
		((even? expn) (remainder (square (expmod base (/ expn 2) m)) m))
		(else
		  (remainder (* base (expmod base (- expn 1) m)) m))))

(define (fermat-test n)
  (define rand (+ 1 (random (- n 1))))
  (= (expmod rand n n) rand))

(define (fast-prime? p times)
  (cond ((< p 2) #f)
		((= times 0) #t)
		((fermat-test p) (fast-prime? p (- times 1)))
		(else #f)))

(define (prime? n) (fast-prime? n 10))

(define (prime-timer n)
  (define (report-prime elapsed-time)
	(display " *** ")
	(display elapsed-time))
  (define (start-prime-test n start-time)
	(cond ((prime? n)
	  (report-prime (- (current-inexact-milliseconds) start-time)))))
  (newline)
  (display n)
  (start-prime-test n (current-inexact-milliseconds)))

(define (search-primes n)
  (define (search-primes-count n count)
	(if (even? n)
	  (search-primes-count (+ n 1) count)
	  (cond ((> count 0) 
		(if (prime? n)
		  (begin
		    (prime-timer n)
		    (search-primes-count (+ n 2) (- count 1)))
		  (search-primes-count (+ n 2) count))))))
  (search-primes-count n 3)
  (newline)
)
